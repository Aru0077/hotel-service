// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// 枚举定义区域
// ================================

// 用户角色枚举
// 定义系统中所有用户的角色类型
enum UserRole {
  CLIENT // 普通用户（客户端）- 预订宾馆的终端用户
  BUSINESS // 商家用户 - 拥有和管理宾馆的商户
  ADMIN // 管理员 - 系统管理和运营人员
}

//  认证方式枚举
//  支持多种用户身份验证方式
enum AuthType {
  PHONE // 手机验证码登录
  FACEBOOK // Facebook第三方登录
  PASSWORD // 传统账号密码登录
  EMAIL // 邮箱登录验证
}

// 用户状态枚举
// 管理用户账户的生命周期状态
enum UserStatus {
  ACTIVE // 激活状态 - 正常使用
  INACTIVE // 禁用状态 - 暂停使用权限
  PENDING // 待审核状态 - 等待管理员审批
}

// ================================
// 核心用户表 - 统一管理所有角色的基础信息
// ================================
// 用户主表
// 作为整个用户体系的核心，统一管理所有角色用户的基础信息
// 采用多态设计，通过role字段区分不同类型的用户
model User {
  id   Int    @id @default(autoincrement()) // 主键ID，自增
  uuid String @unique @default(uuid()) @db.Char(36) // 外部标识符，用于API接口

  role      UserRole // 用户角色，决定用户的权限和功能范围
  status    UserStatus @default(ACTIVE) // 用户状态，控制账户的可用性
  createdAt DateTime   @default(now()) @map("created_at") // 创建时间
  updatedAt DateTime   @updatedAt @map("updated_at") // 最后更新时间

  // ================================
  // 关联关系定义
  // ================================
  authCredentials AuthCredential[] // 认证信息，支持多种登录方式的一对多关系

  clientProfile ClientProfile? // 普通用户扩展信息，一对一关系
  hotels        Hotel[] // 宾馆信息，商家用户可拥有多个宾馆的一对多关系
  adminProfile  AdminProfile? // 管理员扩展信息，一对一关系

  // ================================
  // 数据库索引优化
  // ================================
  @@index([role, status]) // 复合索引，优化角色和状态的查询性能
  @@map("users")
}

// ================================
// 认证信息表 - 支持多种登录方式扩展
// ================================
// 用户认证凭据表
// 支持用户通过多种方式进行身份验证
// 一个用户可以绑定多种认证方式（如同时支持手机号和Facebook登录）
model AuthCredential {
  id         Int      @id @default(autoincrement()) // 主键ID
  userId     Int      @map("user_id") // 关联的用户ID
  authType   AuthType @map("auth_type") // 认证方式类型
  identifier String   @db.VarChar(255) // 登录标识符（手机号/Facebook ID/用户名/邮箱地址）
  credential String?  @db.VarChar(255) // 认证凭据（密码哈希值，验证码类型不存储）

  createdAt DateTime @default(now()) @map("created_at") // 创建时间
  updatedAt DateTime @updatedAt @map("updated_at") // 更新时间

  // ================================
  // 关联关系
  // ================================
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // 级联删除

  // ================================
  // 约束和索引
  // ================================
  @@unique([authType, identifier], name: "unique_auth_identifier") // 确保同一认证方式下标识符唯一
  @@index([userId]) // 用户ID索引，优化查询性能
  @@map("auth_credentials")
}

// ================================
// 普通用户扩展表 - 客户端用户的特有信息
// ================================
// 普通用户档案表
// 存储客户端用户的个人信息和偏好设置
// 主要针对通过Facebook等社交平台注册的用户
model ClientProfile {
  userId     Int      @id @map("user_id") // 用户ID，作为主键
  facebookId String   @unique @map("facebook_id") @db.VarChar(100) // Facebook用户唯一标识
  fullName   String?  @map("full_name") @db.VarChar(50) // 用户全名
  avatar     String?  @db.VarChar(255) // 头像图片URL地址
  createdAt  DateTime @default(now()) @map("created_at") // 创建时间
  updatedAt  DateTime @updatedAt @map("updated_at") // 更新时间

  // ================================
  // 关联关系
  // ================================
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // 与用户主表的一对一关联

  @@map("client_profiles")
}

// ================================
// 宾馆信息表 - 商家核心业务实体
// ================================
// 宾馆信息表
// 存储宾馆的详细信息和运营数据
// 一个商家用户可以拥有和管理多个宾馆
model Hotel {
  id              Int      @id @default(autoincrement()) // 宾馆唯一标识ID
  userId          Int      @map("user_id") // 关联的商家用户ID
  hotelName       String   @map("hotel_name") @db.VarChar(100) // 宾馆名称
  companyName     String?  @map("company_name") @db.VarChar(100) // 所属公司名称
  contactPhone    String   @map("contact_phone") @db.VarChar(20) // 联系电话
  bankAccount     String?  @map("bank_account") @db.VarChar(50) // 银行账户信息
  businessLicense String?  @map("business_license") @db.VarChar(255) // 营业执照文件路径
  address         String   @db.VarChar(255) // 宾馆详细地址
  email           String?  @db.VarChar(100) // 联系邮箱
  description     String?  @db.Text // 宾馆描述信息
  facilities      Json? // 设施信息（JSON格式存储，如WiFi、停车场、游泳池等）
  starRating      Int?     @map("star_rating") @db.SmallInt // 星级评定（1-5星）
  checkInTime     String?  @map("check_in_time") @db.VarChar(10) // 标准入住时间（如14:00）
  checkOutTime    String?  @map("check_out_time") @db.VarChar(10) // 标准退房时间（如12:00）
  status          String   @default("ACTIVE") @db.VarChar(20) // 宾馆运营状态
  createdAt       DateTime @default(now()) @map("created_at") // 创建时间
  updatedAt       DateTime @updatedAt @map("updated_at") // 最后更新时间

  // ================================
  // 关联关系
  // ================================
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // 与商家用户的多对一关联

  // ================================
  // 索引优化
  // ================================
  @@index([userId]) // 商家用户ID索引，快速查找特定商家的所有宾馆
  @@index([contactPhone]) // 联系电话索引，支持电话号码查询
  @@index([hotelName]) // 宾馆名称索引，支持名称搜索
  @@map("hotels")
}

// ================================
// 管理员扩展表 - 系统管理人员信息
// ================================
// 管理员档案表
// 存储系统管理员的权限配置和管理信息
// 支持细粒度的权限控制和部门管理
model AdminProfile {
  userId      Int       @id @map("user_id") // 管理员用户ID
  username    String    @unique @db.VarChar(50) // 管理员用户名，系统内唯一
  department  String?   @db.VarChar(50) // 所属部门（如运营部、技术部）
  permissions Json? // 权限配置（JSON格式，定义具体的操作权限）
  lastLoginAt DateTime? @map("last_login_at") // 最后登录时间，用于安全审计
  createdAt   DateTime  @default(now()) @map("created_at") // 创建时间
  updatedAt   DateTime  @updatedAt @map("updated_at") // 更新时间

  // ================================
  // 关联关系
  // ================================
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // 与用户主表的一对一关联

  @@map("admin_profiles")
}
